# -*- coding: utf-8 -*-
"""fahmifuady-submission-ml2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aO6lAApYkix9jKRZtN5Z7TYaN4IgxqQb
"""

# kaggle setting / upload API Token 
!pip install -q kaggle
from google.colab import files
files.upload()
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
! kaggle datasets list


# download dataset dari https://www.kaggle.com/sshikamaru/fruit-recognition
!kaggle datasets download -d sshikamaru/fruit-recognition

# ekstrak file zip
import os
import zipfile
fz = '/content/fruit-recognition.zip'
ekstrak = zipfile.ZipFile(fz, 'r')
ekstrak.extractall('/content')

!rm -rf /content/test/
path = '/content/train/train'

!pip install split-folders

# menggunakan split_folders untuk memisahkan train sama validasi
import splitfolders
splitfolders.ratio(path,
                   output='/content/dataset',
                   seed=13,
                   ratio=(.8, .2))

# mendefinisikan path dataset
main_dir = '/content/dataset'
tr = os.path.join(main_dir, 'train')
va = os.path.join(main_dir, 'val')

# join path nya train
applebraeburn_tr = os.path.join(tr, 'Apple Braeburn')
applegrannysmith_tr = os.path.join(tr, 'Apple Granny Smith')
apricot_tr = os.path.join(tr, 'Apricot')
avocado_tr = os.path.join(tr, 'Avocado')
banana_tr = os.path.join(tr, 'Banana')
blueberry_tr = os.path.join(tr, 'Blueberry')
cactusfruit_tr = os.path.join(tr, 'Cactus fruit')
cantaloupe_tr = os.path.join(tr, 'Cantaloupe')
cherry_tr = os.path.join(tr, 'Cherry')
celementine_tr = os.path.join(tr, 'Clementine')
corn_tr = os.path.join(tr, 'Corn')
cucumberripe_tr = os.path.join(tr, 'Cucumber Ripe')
grapeblue_tr = os.path.join(tr, 'Grape Blue')
kiwi_tr = os.path.join(tr, 'Kiwi')
lemon_tr = os.path.join(tr, 'Lemon')
limes_tr = os.path.join(tr, 'Limes')
manggo_tr = os.path.join(tr, 'Manggo')
onionwhite_tr = os.path.join(tr, 'Onion White')
orange_tr = os.path.join(tr, 'Orange')
papaya_tr = os.path.join(tr, 'Papaya')
passionfruit_tr = os.path.join(tr, 'Passion Fruit')
peach_tr = os.path.join(tr, 'Peach')
pear_tr = os.path.join(tr, 'Pear')
peppergreen_tr = os.path.join(tr, 'Pepper Green')
pepperred_tr = os.path.join(tr, 'Pepper Red')
pineapple_tr = os.path.join(tr, 'Pineapple')
plum_tr = os.path.join(tr, 'Plum')
pomegranate_tr = os.path.join(tr, 'Pomegranate')
potato_tr = os.path.join(tr, 'Potato Red')
raspberry_tr = os.path.join(tr, 'Raspberry')
strawberry_tr = os.path.join(tr, 'Strawberry')
tomato_tr = os.path.join(tr, 'Tomato')
watermelon_tr = os.path.join(tr, 'Watermelon')

# join path nya val
applebraeburn_va = os.path.join(va, 'Apple Braeburn')
applegrannysmith_va = os.path.join(va, 'Apple Granny Smith')
apricot_va = os.path.join(va, 'Apricot')
avocado_va = os.path.join(va, 'Avocado')
banana_va = os.path.join(va, 'Banana')
blueberry_va = os.path.join(va, 'Blueberry')
cactusfruit_va = os.path.join(va, 'Cactus fruit')
cantaloupe_va = os.path.join(va, 'Cantaloupe')
cherry_va = os.path.join(va, 'Cherry')
celementine_va = os.path.join(va, 'Clementine')
corn_va = os.path.join(va, 'Corn')
cucumberripe_va = os.path.join(va, 'Cucumber Ripe')
grapeblue_va = os.path.join(va, 'Grape Blue')
kiwi_va = os.path.join(va, 'Kiwi')
lemon_va = os.path.join(va, 'Lemon')
limes_va = os.path.join(va, 'Limes')
manggo_va = os.path.join(va, 'Manggo')
onionwhite_va = os.path.join(va, 'Onion White')
orange_va = os.path.join(va, 'Orange')
papaya_va = os.path.join(va, 'Papaya')
passionfruit_va = os.path.join(va, 'Passion Fruit')
peach_va = os.path.join(va, 'Peach')
pear_va = os.path.join(va, 'Pear')
peppergreen_va = os.path.join(va, 'Pepper Green')
pepperred_va = os.path.join(va, 'Pepper Red')
pineapple_va = os.path.join(va, 'Pineapple')
plum_va = os.path.join(va, 'Plum')
pomegranate_va = os.path.join(va, 'Pomegranate')
potato_va = os.path.join(va, 'Potato Red')
raspberry_va = os.path.join(va, 'Raspberry')
strawberry_va = os.path.join(va, 'Strawberry')
tomato_va = os.path.join(va, 'Tomato')
watermelon_va = os.path.join(va, 'Watermelon')

# import library
import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

tr_idg = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    shear_range=0.2
    )
va_igd = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    fill_mode='nearest',
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
    )

tr_generator = tr_idg.flow_from_directory(
    tr,
    target_size=(150, 150),
    batch_size=4,
    class_mode='categorical',
    shuffle=True
)

va_generator = va_igd.flow_from_directory(
    va,
    target_size=(150, 150),
    batch_size=4,
    class_mode='categorical',
    shuffle=True
)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Dropout(0.2), ### added
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Conv2D(256, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Dropout(0.2),### added
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(33, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

model.summary()

import tensorflow as tf

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.92):
      print("\nAkurasi telah mencapai >92%!")
      self.model.stop_training = True
callbacks = myCallback()

history = model.fit(
    tr_generator,
    steps_per_epoch=35,
    epochs=100,
    validation_data=va_generator,
    validation_steps=5,
    verbose=2,
    callbacks=[callbacks])

# liat grafik akurasi
import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validasion Accuracy')
plt.title('Model accuracy')
plt.ylabel('accuracy')
plt.xlabel('Epoch')
plt.legend(loc='lower right')
plt.show()

#liat versi tf
print(tf.__version__)

model.save('/content/savemodel', include_optimizer=True)

# Convert the model
saved_model_dir = '/content/savemodel'
converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir) # path to the SavedModel directory
tflite_model = converter.convert()

# Save the model.
with open('model.tflite', 'wb') as f:
  f.write(tflite_model)